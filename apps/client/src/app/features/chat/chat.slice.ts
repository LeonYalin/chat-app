import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { RootState, AppThunk } from '../../store';
// import { fetchCount } from './counterAPI';
import { gql } from '@apollo/client';
import gqlClient from '@client/utils/graphql.utils';
import { UIStatus } from '@client/utils/enums';
import { ChatUser, createChatMessage, createChat, Chat } from '@shared/models/chat.model';

export interface ChatState {
  chats: Chat[];
  selectedChatId: string | null;
  chatUsers: ChatUser[];
  uiStatus: UIStatus;
}

const initialState: ChatState = {
  chats: [],
  selectedChatId: null,
  chatUsers: [],
  uiStatus: UIStatus.IDLE,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addChatAsync = createAsyncThunk('chat/addChatAsync', async () => {
  const mutation = gql`
    mutation AddChat($chat: ChatInput!) {
      addChat(chat: $chat) {
        id
        name
        avatarUrl
        messages {
          id
          content
          chatUserId
          createdAt
        }
        participants {
          id
          name
          avatarUrl
        }
        createdAt
      }
    }
  `;
  return gqlClient().mutate({ mutation, variables: { chat: createChat() } });
});

export const loadChatsAsync = createAsyncThunk('chat/loadChatsAsync', async () => {
  const query = gql`
    query LoadChats {
      chats {
        id
        name
        avatarUrl
        messages {
          id
          content
          chatUserId
          createdAt
        }
        participants {
          id
          name
          avatarUrl
        }
        createdAt
      }
    }
  `;
  return gqlClient().query({ query });
});

export const chatSlice = createSlice({
  name: 'chat',
  initialState,
  reducers: {
    // addChat: state => {
    //   const newChat = createChat();
    //   state.chats.push(newChat);
    //   state.selectedChatId = newChat.id;
    // },
    deleteChat: (state, action: PayloadAction<{ chatId: string }>) => {
      const { chatId } = action.payload;
      state.chats = state.chats.filter(chat => chat.id !== chatId);
      state.selectedChatId = null;
    },
    changeChatName: (state, action: PayloadAction<{ chatId: string; newName: string }>) => {
      const { chatId, newName } = action.payload;
      const chat = state.chats.find(chat => chat.id === chatId);
      if (chat) {
        chat.name = newName;
      }
    },
    addParticipantToChat: (state, action: PayloadAction<{ chatId: string; participantId: string }>) => {
      const { chatId, participantId } = action.payload;
      const chat = state.chats.find(chat => chat.id === chatId);
      const participant = state.chatUsers.find(user => user.id === participantId);
      if (chat && participant) {
        chat.participants.push(participant);
      }
    },
    addChatMessage: (state, action: PayloadAction<{ content: string }>) => {
      const selectedChat = state.chats.find(chat => chat.id === state.selectedChatId);
      if (selectedChat) {
        selectedChat.messages.push(createChatMessage({ content: action.payload.content }));
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(addChatAsync.fulfilled, (state, action) => {
        const addedChat = action.payload.data.addChat;
        state.chats.push(addedChat);
        state.selectedChatId = addedChat.id;
      })
      .addCase(loadChatsAsync.fulfilled, (state, action) => {
        const chats = action.payload.data.chats;
        if (chats.length > 0) {
          state.selectedChatId = chats[0].id;
          state.chats = chats;
        }
      })
      .addMatcher(
        action => action.type.endsWith('/pending'),
        state => {
          state.uiStatus = UIStatus.LOADING;
        },
      )
      .addMatcher(
        action => action.type.endsWith('/rejected'),
        state => {
          state.uiStatus = UIStatus.FAILED;
        },
      )
      .addMatcher(
        action => action.type.endsWith('/fulfilled'),
        state => {
          state.uiStatus = UIStatus.IDLE;
        },
      );
  },
});

export const { deleteChat, addParticipantToChat, changeChatName, addChatMessage } = chatSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectChatState = (state: RootState) => state.chat;
export const selectChats = (state: RootState) => state.chat.chats;
export const selectSelectedChat = (state: RootState) => state.chat.chats.find(chat => chat.id === state.chat.selectedChatId) || null;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectChatState(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default chatSlice.reducer;
